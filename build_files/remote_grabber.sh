#!/bin/bash
#
EXTENSIONS_DIR="/usr/share/gnome-shell/extensions"
TMP="/tmp/gnome-shell"
mkdir -p $TMP

#pip-on-top
git clone "https://github.com/Rafostar/gnome-shell-extension-pip-on-top.git" "$EXTENSIONS_DIR/pip-on-top@rafostar.github.com"
glib-compile-schemas "$EXTENSIONS_DIR/pip-on-top@rafostar.github.com/schemas"

echo -e "\033[31mGNOME SHELL EXTENSIONS\033[0m"
# burn-my-windows
curl -L https://github.com/Schneegans/Burn-My-Windows/releases/download/v46/burn-my-windows@schneegans.github.com.zip -o $TMP/burn-my-windows@schneegans.github.com.zip
unzip -o $TMP/burn-my-windows@schneegans.github.com.zip -d $EXTENSIONS_DIR/burn-my-windows@schneegans.github.com

# clipboard-indicator
git clone https://github.com/Tudmotu/gnome-shell-extension-clipboard-indicator.git "$EXTENSIONS_DIR/clipboard-indicator@tudmotu.com"

#date-menu-formatter
git clone https://github.com/marcinjakubowski/date-menu-formatter.git "$EXTENSIONS_DIR/date-menu-formatter@tudmotu.com"

# 'User Avatar in Quick Settings'
git clone https://github.com/d-go/quick-settings-avatar.git "$EXTENSIONS_DIR/quick-settings-avatar@d-go"
# 'Gnome 4x UI Improvments'
curl -L https://github.com/axxapy/gnome-ui-tune/releases/download/v1.10.2/gnome-ui-tune@itstime.tech.shell-extension.zip -o $TMP/gnome-ui-tune@itstime.tech.shell-extension.zip
unzip $TMP/gnome-ui-tune@itstime.tech.shell-extension.zip -d "$EXTENSIONS_DIR/gnome-ui-tune@itstime.tech"

#Tophat - gnome top panel resource monitor
curl -L https://github.com/fflewddur/tophat/releases/download/v22/tophat@fflewddur.github.io.v22.shell-extension.zip -o $TMP/tophat@fflewddur.github.io.v22.shell-extension.zip
unzip $TMP/tophat@fflewddur.github.io.v22.shell-extension.zip -d "$EXTENSIONS_DIR/tophat@fflewddur.github.io"

dnf5 -y install wget1 
mkdir -p /tmp/tilingshell 

#Install custom kora-icon-theme
dnf5 -y install https://github.com/phantomcortex/kora/releases/download/1.6.5.12/kora-icon-theme-1.6.5.12-1.fc42.noarch.rpm
echo -e "\033[31mKORA CUSTOM\033[0m"

curl -s https://api.github.com/repos/domferr/tilingshell/releases/latest | \
            jq -r '.assets | sort_by(.created_at) | .[] | select (.name|test("^tilingshell@.*zip$")) | .browser_download_url' | \
            wget -qi - -O /tmp/tilingshell/tilingshell@ferrarodomenico.com.zip && \
        unzip /tmp/tilingshell/tilingshell@ferrarodomenico.com.zip -d /usr/share/gnome-shell/extensions/tilingshell@ferrarodomenico.com && \
        curl -Lo /usr/share/thumbnailers/exe-thumbnailer.thumbnailer https://raw.githubusercontent.com/jlu5/icoextract/master/exe-thumbnailer.thumbnailer && \
        systemctl enable dconf-update.service \

# verify
dnf5 -y install akmod
echo -e "\033[31mVERIFY GNOME EXTENSIONS\033[0m"
ls /usr/share/gnome-shell/extensions/
echo "......................."
ls /usr/share/gnome-shell/extensions/ |grep -E 'tophat|gnome-ui-tune|burn-my-windows|tophat'

echo -e "\033[31mVERIFY THEMES\033[0m"
ls /usr/share/themes/ |grep -e 'Orchis'
echo -e "\033[31mVERIFY ICONS\033[0m"
ls /usr/share/icons/ |grep -E 'capitaine|Deppin'
echo -e "\033[31mVERIFY BACKGROUNDS\033[0m"
ls /usr/share/backgrounds |grep -e 'skyrim'

echo -e "\033[31mCOMPILE GLIB SCHEMAS033[0m"
glib-compile-schemas /usr/share/glib-2.0/schemas/

#grab wine builds
#curl -L https://github.com/Kron4ek/Wine-Builds/releases/download/10.12/wine-10.12-staging-tkg-ntsync-amd64-wow64.tar.xz -o $TMP/

#The following is generated by chatgpt-4o and then modified by claude sonnet 4 (Yes I know, 'vibe coding bad!')
echo -e "\033[31m=====================================================================================\033[0m"
REPO="Kron4ek/Wine-Builds"
TMP="${TMP:-/tmp}"
INSTALL_DIR="/usr"

# Get all releases from GitHub API and filter for Wine builds only
echo "Fetching release information..."
latest_wine_version=$(curl -s "https://api.github.com/repos/${REPO}/releases" | \
    jq -r '.[] | select(.tag_name | startswith("wine-")) | .tag_name' | \
    head -n 1)

# Fallback: if no wine- prefixed releases found, try different approach
if [ -z "$latest_wine_version" ] || [ "$latest_wine_version" = "null" ]; then
    echo "No wine- prefixed releases found, checking for releases containing 'wine' but not 'proton'..."
    latest_wine_version=$(curl -s "https://api.github.com/repos/${REPO}/releases" | \
        jq -r '.[] | select(.tag_name | contains("wine") and (contains("proton") | not)) | .tag_name' | \
        head -n 1)
fi

# Final fallback: manual version specification
if [ -z "$latest_wine_version" ] || [ "$latest_wine_version" = "null" ]; then
    echo "Unable to automatically detect Wine version. Please check releases manually."
    echo "Visit: https://github.com/${REPO}/releases"
    exit 1
fi

# Construct filename and download URL
basename="wine-${latest_wine_version}-staging-tkg-ntsync-amd64-wow64"
archive="${basename}.tar.xz"
url="https://github.com/${REPO}/releases/download/${latest_wine_version}/${archive}"
dest="${TMP}/${archive}"

echo "Latest Wine version detected: ${latest_wine_version}"
echo "Downloading ${url}..."

# Download the archive
if ! curl -L -o "${dest}" "${url}"; then
    echo "Download failed. Checking if asset exists..."
    # Sometimes the naming convention might vary slightly
    echo "Available assets for ${latest_wine_version}:"
    curl -s "https://api.github.com/repos/${REPO}/releases" | \
        jq -r ".[] | select(.tag_name == \"${latest_wine_version}\") | .assets[].name"
    exit 1
fi

echo "Extracting archive, omitting 'wine-tkg-config.txt'..."

# Extract excluding 'wine-tkg-config.txt'
tar --exclude="${basename}/wine-tkg-config.txt" -xJf "${dest}" -C "${TMP}"

# Move contents to /usr, preserving the structure
echo "Installing to ${INSTALL_DIR}..."

for dir in bin lib include share; do
    if [ -d "${TMP}/${basename}/${dir}" ]; then
        echo "Installing ${dir} components..."
        cp -r "${TMP}/${basename}/${dir}"/* "${INSTALL_DIR}/${dir}/"
    fi
done

# Clean up
echo "Cleaning up temporary files..."
rm -f "${dest}"
rm -rf "${TMP}/${basename}"

echo -e "\033[36mWine installation complete.\033[0m"
echo "Version installed: ${latest_wine_version}"
#check
if [[ -f "/usr/bin/wine" ]]; then
  echo -e "wine-build installed correctly"
else
  echo -e "wine-build did not install correctly"
  exit 1
fi

echo -e "\033[31m=====================================================================================\033[0m"
# cleanup

rm -rf /tmp/gnome-shell

echo -e "\033[31m=======================================================================================================================================================================================================================================================================================================================================================================================\033[0m"
