---
name: Build DistinctionOS
on:
  pull_request:
    branches:
      - main
  schedule:
    - cron: '05 8 */4 * *'  # 2:05am Mountain time every 4 days
  push:
    branches:
      - main
    paths-ignore:
      - '.github/**'
      - '**/README.md'
      - '**/claude.md'
      - 'repo_files/**'
  workflow_dispatch:

env:
  IMAGE_DESC: "Bazzite but with custom modifications"
  IMAGE_KEYWORDS: "bootc,ublue,universal-blue"
  IMAGE_LOGO_URL: "https://avatars.githubusercontent.com/u/120078124?s=200&v=4" 
  IMAGE_NAME: "${{ github.event.repository.name }}"
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"
  DEFAULT_TAG: "stable"  # Changed from "rechunker-stable" for clarity

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build_push:
    name: Build and push image
    runs-on: ubuntu-24.04

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Maximize build space
        uses: ublue-os/remove-unwanted-software@v7

      - name: Prepare environment
        run: |
          echo "IMAGE_REGISTRY=${IMAGE_REGISTRY,,}" >> ${GITHUB_ENV}
          echo "IMAGE_NAME=${IMAGE_NAME,,}" >> ${GITHUB_ENV}
          
      - name: Get current date
        id: date
        run: |
          echo "date=$(date -u +%Y\-%m\-%d\T%H\:%M\:%S\Z)" >> $GITHUB_OUTPUT

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          # Generate a timestamp for creating an image version history
          TIMESTAMP="$(date +%Y%m%d)"
          COMMIT_TAGS=()
          BUILD_TAGS=()
          
          # Have tags for tracking builds during pull request
          SHA_SHORT="${GITHUB_SHA::7}"
          COMMIT_TAGS+=("pr-${{ github.event.number }}")
          COMMIT_TAGS+=("${SHA_SHORT}")

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              BUILD_TAGS=("${COMMIT_TAGS[@]}")
          else
              BUILD_TAGS+=("${DEFAULT_TAG}")
              BUILD_TAGS+=("${DEFAULT_TAG}-${TIMESTAMP}")
              BUILD_TAGS+=("latest")
          fi

          echo "Generated the following build tags: "
          for TAG in "${BUILD_TAGS[@]}"; do
              echo "${TAG}"
          done

          echo "tags=${BUILD_TAGS[*]}" >> $GITHUB_OUTPUT

      - name: Image Metadata
        uses: docker/metadata-action@v5
        id: metadata
        with:
          images: |
            ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            ${{ steps.generate-tags.outputs.tags }}
          labels: |
            org.opencontainers.image.created=${{ steps.date.outputs.date }}
            org.opencontainers.image.description=${{ env.IMAGE_DESC }}
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            io.artifacthub.package.keywords=${{ env.IMAGE_KEYWORDS }}
            io.artifacthub.package.logo-url=${{ env.IMAGE_LOGO_URL }}

      - name: Build image (rootful)
        id: build_image
        run: |
          sudo buildah bud \
            --format docker \
            --tag "localhost/${{ env.IMAGE_NAME }}:build" \
            --file Containerfile \
            .

      - name: Remove source images
        run: |
          images=$(sudo podman images -n --sort repository --format '{{.ID}} {{.Repository}}' | grep -v localhost | awk '{print $1}')
          if [ -n "${images}" ]; then
            for image in ${images}; do
              echo "Removing image: $image"
              sudo podman rmi --force "$image" || true
            done
          else
            echo "No images to remove."
          fi

      - name: Run Rechunker
        id: rechunk
        uses: hhd-dev/rechunk@v1.2.3
        with:
          rechunk: "ghcr.io/hhd-dev/rechunk:v1.2.3"
          ref: "localhost/${{ env.IMAGE_NAME }}:build"
          prev-ref: "${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DEFAULT_TAG }}"
          skip_compression: false
          max-layers: 100
          labels: ${{ steps.metadata.outputs.labels }}

      - name: Load in podman and tag
        run: |
          IMAGE=$(sudo podman pull ${{ steps.rechunk.outputs.ref }})
          sudo rm -rf ${{ steps.rechunk.outputs.location }}
          for tag in ${{ steps.generate-tags.outputs.tags }}; do
            sudo podman tag $IMAGE ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${tag}
          done

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push To GHCR
        if: github.event_name != 'pull_request'
        run: |
          for tag in ${{ steps.generate-tags.outputs.tags }}; do
            echo "Pushing ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${tag}"
            sudo podman push \
              --compress \
              --format v2s2 \
              ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${tag}
          done

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        if: github.event_name != 'pull_request' && env.COSIGN_PRIVATE_KEY != ''
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

      - name: Sign container image
        if: github.event_name != 'pull_request' && env.COSIGN_PRIVATE_KEY != ''
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
        run: |
          for tag in ${{ steps.generate-tags.outputs.tags }}; do
            cosign sign -y --key env://COSIGN_PRIVATE_KEY \
              ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${tag}
          done
