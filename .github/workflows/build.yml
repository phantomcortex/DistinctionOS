---
name: Build DistinctionOS
on:
  pull_request:
    branches:
      - main
  schedule:
    - cron: '05 8 */4 * *'  # 2:05am Mountain time every 4 days
  push:
    branches:
      - main
    paths-ignore:
      - '.github/**'
      - '**/README.md'
      - '**/claude.md'
      - 'repo_files/**'
  workflow_dispatch:

env:
  IMAGE_DESC: "Bazzite but with custom modifications"
  IMAGE_NAME: "distinctionos"  # Hardcoded to avoid case issues
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"
  DEFAULT_TAG: "testing"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build_push:
    name: Build and push image
    runs-on: ubuntu-24.04
    
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Maximize build space
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: false
          swap-storage: true

      - name: Prepare environment
        run: |
          # Ensure lowercase for registry
          echo "IMAGE_REGISTRY=${IMAGE_REGISTRY,,}" >> ${GITHUB_ENV}
          echo "TIMESTAMP=$(date +%Y%m%d)" >> ${GITHUB_ENV}
          
      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          TIMESTAMP="${{ env.TIMESTAMP }}"
          BUILD_TAGS=()
          
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              BUILD_TAGS+=("pr-${{ github.event.number }}")
          else
              BUILD_TAGS+=("${{ env.DEFAULT_TAG }}")
              BUILD_TAGS+=("${{ env.DEFAULT_TAG }}-${TIMESTAMP}")
              BUILD_TAGS+=("latest")
              BUILD_TAGS+=("${TIMESTAMP}")
          fi

          echo "Generated tags: ${BUILD_TAGS[*]}"
          echo "tags=${BUILD_TAGS[*]}" >> $GITHUB_OUTPUT

      - name: Check for cache image
        id: cache-check
        run: |
          # Check if we have a previous build to use as cache
          if skopeo inspect docker://${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DEFAULT_TAG }} &>/dev/null; then
            echo "cache_exists=true" >> $GITHUB_OUTPUT
            echo "cache_from=--cache-from ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DEFAULT_TAG }}" >> $GITHUB_OUTPUT
            echo "Found cache image: ${{ env.DEFAULT_TAG }}"
          else
            echo "cache_exists=false" >> $GITHUB_OUTPUT
            echo "cache_from=" >> $GITHUB_OUTPUT
            echo "No cache image found, will build without cache"
          fi

      - name: Get previous image reference
        id: prev-ref
        run: |
          # Try to get yesterday's build for better rechunk optimization
          YESTERDAY=$(date -d "yesterday" +%Y%m%d)
          PREV_TAG="${{ env.DEFAULT_TAG }}-${YESTERDAY}"
          
          # Check if yesterday's image exists
          if skopeo inspect docker://${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${PREV_TAG} &>/dev/null; then
            echo "prev_ref=${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${PREV_TAG}" >> $GITHUB_OUTPUT
            echo "Found previous build: ${PREV_TAG}"
          elif skopeo inspect docker://${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DEFAULT_TAG }} &>/dev/null; then
            echo "prev_ref=${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DEFAULT_TAG }}" >> $GITHUB_OUTPUT
            echo "Using stable tag as previous reference"
          else
            echo "prev_ref=" >> $GITHUB_OUTPUT
            echo "No previous reference found"
          fi

      - name: Image Metadata
        uses: docker/metadata-action@v5
        id: metadata
        with:
          images: |
            ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.description=${{ env.IMAGE_DESC }}
            org.opencontainers.image.version=${{ env.DEFAULT_TAG }}-${{ env.TIMESTAMP }}
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/main/README.md
            containers.bootc=1

      - name: Pull previous image for package comparison
        id: prev-packages
        if: steps.prev-ref.outputs.prev_ref != ''
        run: |
          # Pull previous image and extract package list
          echo "Pulling previous image for package comparison..."
          # Create container with dummy command
          CONTAINER=$(sudo podman create --entrypoint /bin/bash ${{ steps.prev-ref.outputs.prev_ref }} -c "sleep 1")
          MOUNT=$(sudo podman mount $CONTAINER)
          
          # Extract package list from previous build
          if [ -d "${MOUNT}/usr/lib/sysimage/rpm" ]; then
            # OSTree path
            sudo rpm --root $MOUNT/usr/lib/sysimage -qa | sort > /tmp/prev-packages.txt
          elif [ -d "${MOUNT}/var/lib/rpm" ]; then
            # Traditional path
            sudo rpm --root $MOUNT -qa | sort > /tmp/prev-packages.txt
          else
            echo "Warning: Could not find RPM database in previous image"
            touch /tmp/prev-packages.txt
          fi

      - name: Build image (rootful)
        id: build_image
        run: |
          # Build with optional caching
          sudo buildah bud \
            --format docker \
            --layers \
            ${{ steps.cache-check.outputs.cache_from }} \
            --tag "localhost/${{ env.IMAGE_NAME }}:build" \
            --file Containerfile \
            .
            
      - name: Extract current package list and generate changelog
        id: package-diff
        run: |
          # Extract package list from current build
          # Create container with dummy command
          CONTAINER=$(sudo podman create --entrypoint /bin/bash localhost/${{ env.IMAGE_NAME }}:build -c "sleep 1")
          MOUNT=$(sudo podman mount $CONTAINER)

          # Get current package list - check both possible locations
          if [ -d "${MOUNT}/usr/lib/sysimage/rpm" ]; then
            # OSTree path
            sudo rpm --root $MOUNT/usr/lib/sysimage -qa | sort > /tmp/current-packages.txt
          elif [ -d "${MOUNT}/var/lib/rpm" ]; then
            # Traditional path
            sudo rpm --root $MOUNT -qa | sort > /tmp/current-packages.txt
          else
            echo "Warning: Could not find RPM database in current image"
            touch /tmp/current-packages.txt
          fi

          # Cleanup
          sudo podman umount $CONTAINER
          sudo podman rm $CONTAINER

          # Generate package changelog
          echo "## Package Changes" > /tmp/package-changelog.md
          echo "" >> /tmp/package-changelog.md

          if [ -f /tmp/prev-packages.txt ] && [ -s /tmp/prev-packages.txt ]; then
            # Find added packages
            echo "### Added Packages" >> /tmp/package-changelog.md
            comm -13 /tmp/prev-packages.txt /tmp/current-packages.txt > /tmp/added.txt
            if [ -s /tmp/added.txt ]; then
              cat /tmp/added.txt | sed 's/^/- /' >> /tmp/package-changelog.md
            else
              echo "- None" >> /tmp/package-changelog.md
            fi
            echo "" >> /tmp/package-changelog.md

            # Find removed packages
            echo "### Removed Packages" >> /tmp/package-changelog.md
            comm -23 /tmp/prev-packages.txt /tmp/current-packages.txt > /tmp/removed.txt
            if [ -s /tmp/removed.txt ]; then
              cat /tmp/removed.txt | sed 's/^/- /' >> /tmp/package-changelog.md
            else
              echo "- None" >> /tmp/package-changelog.md
            fi
            echo "" >> /tmp/package-changelog.md

            # Find upgraded/downgraded packages
            echo "### Modified Packages" >> /tmp/package-changelog.md

            # Create temp files for comparison
            cat /tmp/prev-packages.txt | sed 's/\(.*\)-[^-]*-[^-]*$/\1/' | sort > /tmp/prev-names.txt
            cat /tmp/current-packages.txt | sed 's/\(.*\)-[^-]*-[^-]*$/\1/' | sort > /tmp/curr-names.txt

            # Find common package names
            comm -12 /tmp/prev-names.txt /tmp/curr-names.txt > /tmp/common-names.txt

            MODIFIED=false
            while read pkg_name; do
              prev_ver=$(grep "^${pkg_name}-" /tmp/prev-packages.txt | head -1 || true)
              curr_ver=$(grep "^${pkg_name}-" /tmp/current-packages.txt | head -1 || true)
              if [ -n "$prev_ver" ] && [ -n "$curr_ver" ] && [ "$prev_ver" != "$curr_ver" ]; then
                echo "- ${curr_ver} (was: ${prev_ver})" >> /tmp/package-changelog.md
                MODIFIED=true
              fi
            done < /tmp/common-names.txt

            if [ "$MODIFIED" = false ]; then
              echo "- None" >> /tmp/package-changelog.md
            fi

            echo "" >> /tmp/package-changelog.md
            echo "### Summary" >> /tmp/package-changelog.md
            echo "- Added: $(wc -l < /tmp/added.txt) packages" >> /tmp/package-changelog.md
            echo "- Removed: $(wc -l < /tmp/removed.txt) packages" >> /tmp/package-changelog.md
            echo "- Modified: $(grep -c '^- ' /tmp/package-changelog.md | tail -1) packages" >> /tmp/package-changelog.md
            echo "- Total: $(wc -l < /tmp/current-packages.txt) packages" >> /tmp/package-changelog.md
          else
            echo "No previous build for comparison - this is the first build" >> /tmp/package-changelog.md
            echo "" >> /tmp/package-changelog.md
            echo "### Total Packages: $(wc -l < /tmp/current-packages.txt)" >> /tmp/package-changelog.md
          fi

          # Output to GitHub summary
          cat /tmp/package-changelog.md >> $GITHUB_STEP_SUMMARY
          
      - name: Clean up pre-rechunk
        run: |
          # Remove all non-localhost images to save space
          images=$(sudo podman images -n --format '{{.ID}} {{.Repository}}' | grep -v localhost | awk '{print $1}')
          if [ -n "${images}" ]; then
            echo "${images}" | xargs -r sudo podman rmi --force || true
          fi

      - name: Run Rechunker
        id: rechunk
        uses: hhd-dev/rechunk@v1.2.3
        with:
          rechunk: "ghcr.io/hhd-dev/rechunk:v1.2.3"
          ref: "localhost/${{ env.IMAGE_NAME }}:build"
          prev-ref: "${{ steps.prev-ref.outputs.prev_ref }}"
          skip_compression: false
          max-layers: 100
          labels: ${{ steps.metadata.outputs.labels }}

      - name: Add rechunker stats to changelog
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Rechunker Statistics" >> $GITHUB_STEP_SUMMARY
          if [ -f "${{ steps.rechunk.outputs.changelog }}" ]; then
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat "${{ steps.rechunk.outputs.changelog }}" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push rechunked image to GHCR
        if: github.event_name != 'pull_request'
        run: |
          # Optimized push directly from rechunker OCI directory
          for tag in ${{ steps.generate-tags.outputs.tags }}; do
            echo "Pushing ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${tag}"
            
            sudo skopeo copy \
              --dest-creds "${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}" \
              --dest-compress \
              --dest-compress-format gzip \
              --retry-times 3 \
              oci:${{ steps.rechunk.outputs.location }} \
              docker://${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${tag}
          done
          
          # Clean up rechunker output
          sudo rm -rf ${{ steps.rechunk.outputs.location }}

      - name: Install Cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3

      - name: Sign container image (keyless)
        if: github.event_name != 'pull_request'
        run: |
          # Sign with GitHub OIDC identity
          for tag in ${{ steps.generate-tags.outputs.tags }}; do
            echo "Signing ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${tag}"
            
            cosign sign --yes \
              ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${tag}
          done

      - name: Verify signatures
        if: github.event_name != 'pull_request'
        run: |
          for tag in ${{ steps.generate-tags.outputs.tags }}; do
            echo "Verifying ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${tag}"
            
            cosign verify \
              --certificate-identity-regexp "https://github.com/${{ github.repository }}/.github/workflows/.*.yml@refs/.*" \
              --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
              ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${tag}
          done
